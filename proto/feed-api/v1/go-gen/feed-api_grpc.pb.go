// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0--rc3
// source: feed-api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServClient is the client API for FeedServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServClient interface {
	Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error)
	SuperLike(ctx context.Context, in *SuperLikeRequest, opts ...grpc.CallOption) (*SuperLikeResponse, error)
	Dislike(ctx context.Context, in *DislikeRequest, opts ...grpc.CallOption) (*DislikeResponse, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	WhoLikedMe(ctx context.Context, in *WhoLikedMeRequest, opts ...grpc.CallOption) (*WhoLikedMeResponse, error)
	GetSaved(ctx context.Context, in *GetSavedRequest, opts ...grpc.CallOption) (*GetSavedResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type feedServClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServClient(cc grpc.ClientConnInterface) FeedServClient {
	return &feedServClient{cc}
}

func (c *feedServClient) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error) {
	out := new(LikeResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServClient) SuperLike(ctx context.Context, in *SuperLikeRequest, opts ...grpc.CallOption) (*SuperLikeResponse, error) {
	out := new(SuperLikeResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/SuperLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServClient) Dislike(ctx context.Context, in *DislikeRequest, opts ...grpc.CallOption) (*DislikeResponse, error) {
	out := new(DislikeResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/Dislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServClient) WhoLikedMe(ctx context.Context, in *WhoLikedMeRequest, opts ...grpc.CallOption) (*WhoLikedMeResponse, error) {
	out := new(WhoLikedMeResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/WhoLikedMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServClient) GetSaved(ctx context.Context, in *GetSavedRequest, opts ...grpc.CallOption) (*GetSavedResponse, error) {
	out := new(GetSavedResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/GetSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/feed_serv.v1.FeedServ/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServServer is the server API for FeedServ service.
// All implementations must embed UnimplementedFeedServServer
// for forward compatibility
type FeedServServer interface {
	Like(context.Context, *LikeRequest) (*LikeResponse, error)
	SuperLike(context.Context, *SuperLikeRequest) (*SuperLikeResponse, error)
	Dislike(context.Context, *DislikeRequest) (*DislikeResponse, error)
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	WhoLikedMe(context.Context, *WhoLikedMeRequest) (*WhoLikedMeResponse, error)
	GetSaved(context.Context, *GetSavedRequest) (*GetSavedResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	mustEmbedUnimplementedFeedServServer()
}

// UnimplementedFeedServServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServServer struct {
}

func (UnimplementedFeedServServer) Like(context.Context, *LikeRequest) (*LikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedFeedServServer) SuperLike(context.Context, *SuperLikeRequest) (*SuperLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperLike not implemented")
}
func (UnimplementedFeedServServer) Dislike(context.Context, *DislikeRequest) (*DislikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dislike not implemented")
}
func (UnimplementedFeedServServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedFeedServServer) WhoLikedMe(context.Context, *WhoLikedMeRequest) (*WhoLikedMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoLikedMe not implemented")
}
func (UnimplementedFeedServServer) GetSaved(context.Context, *GetSavedRequest) (*GetSavedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaved not implemented")
}
func (UnimplementedFeedServServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFeedServServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedFeedServServer) mustEmbedUnimplementedFeedServServer() {}

// UnsafeFeedServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServServer will
// result in compilation errors.
type UnsafeFeedServServer interface {
	mustEmbedUnimplementedFeedServServer()
}

func RegisterFeedServServer(s grpc.ServiceRegistrar, srv FeedServServer) {
	s.RegisterService(&FeedServ_ServiceDesc, srv)
}

func _FeedServ_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).Like(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedServ_SuperLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).SuperLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/SuperLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).SuperLike(ctx, req.(*SuperLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedServ_Dislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).Dislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/Dislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).Dislike(ctx, req.(*DislikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedServ_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedServ_WhoLikedMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoLikedMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).WhoLikedMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/WhoLikedMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).WhoLikedMe(ctx, req.(*WhoLikedMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedServ_GetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).GetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/GetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).GetSaved(ctx, req.(*GetSavedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedServ_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedServ_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_serv.v1.FeedServ/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedServ_ServiceDesc is the grpc.ServiceDesc for FeedServ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedServ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed_serv.v1.FeedServ",
	HandlerType: (*FeedServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Like",
			Handler:    _FeedServ_Like_Handler,
		},
		{
			MethodName: "SuperLike",
			Handler:    _FeedServ_SuperLike_Handler,
		},
		{
			MethodName: "Dislike",
			Handler:    _FeedServ_Dislike_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _FeedServ_Save_Handler,
		},
		{
			MethodName: "WhoLikedMe",
			Handler:    _FeedServ_WhoLikedMe_Handler,
		},
		{
			MethodName: "GetSaved",
			Handler:    _FeedServ_GetSaved_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _FeedServ_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _FeedServ_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed-api.proto",
}
