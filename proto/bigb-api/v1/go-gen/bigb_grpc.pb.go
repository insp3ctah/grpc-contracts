// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: bigb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BigBService_RegisterUser_FullMethodName    = "/bigb_api.v1.BigBService/RegisterUser"
	BigBService_DeleteUser_FullMethodName      = "/bigb_api.v1.BigBService/DeleteUser"
	BigBService_UpdateUser_FullMethodName      = "/bigb_api.v1.BigBService/UpdateUser"
	BigBService_ReadUser_FullMethodName        = "/bigb_api.v1.BigBService/ReadUser"
	BigBService_AuthDataCorrect_FullMethodName = "/bigb_api.v1.BigBService/AuthDataCorrect"
)

// BigBServiceClient is the client API for BigBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BigBServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error)
	AuthDataCorrect(ctx context.Context, in *AuthDataCorrectRequest, opts ...grpc.CallOption) (*AuthDataCorrectResponse, error)
}

type bigBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBigBServiceClient(cc grpc.ClientConnInterface) BigBServiceClient {
	return &bigBServiceClient{cc}
}

func (c *bigBServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, BigBService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigBServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, BigBService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigBServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, BigBService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigBServiceClient) ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadUserResponse)
	err := c.cc.Invoke(ctx, BigBService_ReadUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigBServiceClient) AuthDataCorrect(ctx context.Context, in *AuthDataCorrectRequest, opts ...grpc.CallOption) (*AuthDataCorrectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthDataCorrectResponse)
	err := c.cc.Invoke(ctx, BigBService_AuthDataCorrect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BigBServiceServer is the server API for BigBService service.
// All implementations must embed UnimplementedBigBServiceServer
// for forward compatibility
type BigBServiceServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	ReadUser(context.Context, *ReadUserRequest) (*ReadUserResponse, error)
	AuthDataCorrect(context.Context, *AuthDataCorrectRequest) (*AuthDataCorrectResponse, error)
	mustEmbedUnimplementedBigBServiceServer()
}

// UnimplementedBigBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBigBServiceServer struct {
}

func (UnimplementedBigBServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedBigBServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBigBServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBigBServiceServer) ReadUser(context.Context, *ReadUserRequest) (*ReadUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (UnimplementedBigBServiceServer) AuthDataCorrect(context.Context, *AuthDataCorrectRequest) (*AuthDataCorrectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthDataCorrect not implemented")
}
func (UnimplementedBigBServiceServer) mustEmbedUnimplementedBigBServiceServer() {}

// UnsafeBigBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BigBServiceServer will
// result in compilation errors.
type UnsafeBigBServiceServer interface {
	mustEmbedUnimplementedBigBServiceServer()
}

func RegisterBigBServiceServer(s grpc.ServiceRegistrar, srv BigBServiceServer) {
	s.RegisterService(&BigBService_ServiceDesc, srv)
}

func _BigBService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigBServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BigBService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigBServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigBService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigBServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BigBService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigBServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigBService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigBServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BigBService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigBServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigBService_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigBServiceServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BigBService_ReadUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigBServiceServer).ReadUser(ctx, req.(*ReadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigBService_AuthDataCorrect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthDataCorrectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigBServiceServer).AuthDataCorrect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BigBService_AuthDataCorrect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigBServiceServer).AuthDataCorrect(ctx, req.(*AuthDataCorrectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BigBService_ServiceDesc is the grpc.ServiceDesc for BigBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BigBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bigb_api.v1.BigBService",
	HandlerType: (*BigBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _BigBService_RegisterUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _BigBService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BigBService_UpdateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _BigBService_ReadUser_Handler,
		},
		{
			MethodName: "AuthDataCorrect",
			Handler:    _BigBService_AuthDataCorrect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bigb.proto",
}
