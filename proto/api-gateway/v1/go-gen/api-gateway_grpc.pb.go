// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: api-gateway.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ApiGateway_RegisterUser_FullMethodName       = "/api_gateway.v1.ApiGateway/RegisterUser"
	ApiGateway_LoginUser_FullMethodName          = "/api_gateway.v1.ApiGateway/LoginUser"
	ApiGateway_RefreshToken_FullMethodName       = "/api_gateway.v1.ApiGateway/RefreshToken"
	ApiGateway_CheckToken_FullMethodName         = "/api_gateway.v1.ApiGateway/CheckToken"
	ApiGateway_ReadSelfUser_FullMethodName       = "/api_gateway.v1.ApiGateway/ReadSelfUser"
	ApiGateway_ReadOtherUser_FullMethodName      = "/api_gateway.v1.ApiGateway/ReadOtherUser"
	ApiGateway_DeleteUser_FullMethodName         = "/api_gateway.v1.ApiGateway/DeleteUser"
	ApiGateway_UpdateUser_FullMethodName         = "/api_gateway.v1.ApiGateway/UpdateUser"
	ApiGateway_GetFeedUserPack_FullMethodName    = "/api_gateway.v1.ApiGateway/GetFeedUserPack"
	ApiGateway_DeleteMedia_FullMethodName        = "/api_gateway.v1.ApiGateway/DeleteMedia"
	ApiGateway_GetUserMedia_FullMethodName       = "/api_gateway.v1.ApiGateway/GetUserMedia"
	ApiGateway_GetMediaUploadURL_FullMethodName  = "/api_gateway.v1.ApiGateway/GetMediaUploadURL"
	ApiGateway_ConfirmUploadMedia_FullMethodName = "/api_gateway.v1.ApiGateway/ConfirmUploadMedia"
)

// ApiGatewayClient is the client API for ApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
	ReadSelfUser(ctx context.Context, in *ReadSelfUserRequest, opts ...grpc.CallOption) (*ReadSelfUserResponse, error)
	ReadOtherUser(ctx context.Context, in *ReadOtherUserRequest, opts ...grpc.CallOption) (*ReadOtherUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	GetFeedUserPack(ctx context.Context, in *GetFeedUserPackRequest, opts ...grpc.CallOption) (*GetFeedUserPackResponse, error)
	DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error)
	GetUserMedia(ctx context.Context, in *GetUserMediaRequest, opts ...grpc.CallOption) (*GetUserMediaResponse, error)
	GetMediaUploadURL(ctx context.Context, in *GetMediaUploadUrlRequest, opts ...grpc.CallOption) (*GetMediaUploadUrlResponse, error)
	ConfirmUploadMedia(ctx context.Context, in *ConfirmUploadMediaRequest, opts ...grpc.CallOption) (*ConfirmUploadMediaResponse, error)
}

type apiGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayClient(cc grpc.ClientConnInterface) ApiGatewayClient {
	return &apiGatewayClient{cc}
}

func (c *apiGatewayClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, ApiGateway_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, ApiGateway_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, ApiGateway_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckTokenResponse)
	err := c.cc.Invoke(ctx, ApiGateway_CheckToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) ReadSelfUser(ctx context.Context, in *ReadSelfUserRequest, opts ...grpc.CallOption) (*ReadSelfUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadSelfUserResponse)
	err := c.cc.Invoke(ctx, ApiGateway_ReadSelfUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) ReadOtherUser(ctx context.Context, in *ReadOtherUserRequest, opts ...grpc.CallOption) (*ReadOtherUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadOtherUserResponse)
	err := c.cc.Invoke(ctx, ApiGateway_ReadOtherUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, ApiGateway_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, ApiGateway_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) GetFeedUserPack(ctx context.Context, in *GetFeedUserPackRequest, opts ...grpc.CallOption) (*GetFeedUserPackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedUserPackResponse)
	err := c.cc.Invoke(ctx, ApiGateway_GetFeedUserPack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMediaResponse)
	err := c.cc.Invoke(ctx, ApiGateway_DeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) GetUserMedia(ctx context.Context, in *GetUserMediaRequest, opts ...grpc.CallOption) (*GetUserMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMediaResponse)
	err := c.cc.Invoke(ctx, ApiGateway_GetUserMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) GetMediaUploadURL(ctx context.Context, in *GetMediaUploadUrlRequest, opts ...grpc.CallOption) (*GetMediaUploadUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaUploadUrlResponse)
	err := c.cc.Invoke(ctx, ApiGateway_GetMediaUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) ConfirmUploadMedia(ctx context.Context, in *ConfirmUploadMediaRequest, opts ...grpc.CallOption) (*ConfirmUploadMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmUploadMediaResponse)
	err := c.cc.Invoke(ctx, ApiGateway_ConfirmUploadMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGatewayServer is the server API for ApiGateway service.
// All implementations must embed UnimplementedApiGatewayServer
// for forward compatibility
type ApiGatewayServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error)
	ReadSelfUser(context.Context, *ReadSelfUserRequest) (*ReadSelfUserResponse, error)
	ReadOtherUser(context.Context, *ReadOtherUserRequest) (*ReadOtherUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	GetFeedUserPack(context.Context, *GetFeedUserPackRequest) (*GetFeedUserPackResponse, error)
	DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error)
	GetUserMedia(context.Context, *GetUserMediaRequest) (*GetUserMediaResponse, error)
	GetMediaUploadURL(context.Context, *GetMediaUploadUrlRequest) (*GetMediaUploadUrlResponse, error)
	ConfirmUploadMedia(context.Context, *ConfirmUploadMediaRequest) (*ConfirmUploadMediaResponse, error)
	mustEmbedUnimplementedApiGatewayServer()
}

// UnimplementedApiGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServer struct {
}

func (UnimplementedApiGatewayServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedApiGatewayServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedApiGatewayServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedApiGatewayServer) CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedApiGatewayServer) ReadSelfUser(context.Context, *ReadSelfUserRequest) (*ReadSelfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSelfUser not implemented")
}
func (UnimplementedApiGatewayServer) ReadOtherUser(context.Context, *ReadOtherUserRequest) (*ReadOtherUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOtherUser not implemented")
}
func (UnimplementedApiGatewayServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedApiGatewayServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedApiGatewayServer) GetFeedUserPack(context.Context, *GetFeedUserPackRequest) (*GetFeedUserPackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedUserPack not implemented")
}
func (UnimplementedApiGatewayServer) DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedApiGatewayServer) GetUserMedia(context.Context, *GetUserMediaRequest) (*GetUserMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMedia not implemented")
}
func (UnimplementedApiGatewayServer) GetMediaUploadURL(context.Context, *GetMediaUploadUrlRequest) (*GetMediaUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaUploadURL not implemented")
}
func (UnimplementedApiGatewayServer) ConfirmUploadMedia(context.Context, *ConfirmUploadMediaRequest) (*ConfirmUploadMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUploadMedia not implemented")
}
func (UnimplementedApiGatewayServer) mustEmbedUnimplementedApiGatewayServer() {}

// UnsafeApiGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServer will
// result in compilation errors.
type UnsafeApiGatewayServer interface {
	mustEmbedUnimplementedApiGatewayServer()
}

func RegisterApiGatewayServer(s grpc.ServiceRegistrar, srv ApiGatewayServer) {
	s.RegisterService(&ApiGateway_ServiceDesc, srv)
}

func _ApiGateway_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_ReadSelfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSelfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).ReadSelfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_ReadSelfUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).ReadSelfUser(ctx, req.(*ReadSelfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_ReadOtherUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOtherUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).ReadOtherUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_ReadOtherUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).ReadOtherUser(ctx, req.(*ReadOtherUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_GetFeedUserPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedUserPackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).GetFeedUserPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_GetFeedUserPack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).GetFeedUserPack(ctx, req.(*GetFeedUserPackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).DeleteMedia(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_GetUserMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).GetUserMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_GetUserMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).GetUserMedia(ctx, req.(*GetUserMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_GetMediaUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).GetMediaUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_GetMediaUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).GetMediaUploadURL(ctx, req.(*GetMediaUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_ConfirmUploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmUploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).ConfirmUploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_ConfirmUploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).ConfirmUploadMedia(ctx, req.(*ConfirmUploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiGateway_ServiceDesc is the grpc.ServiceDesc for ApiGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_gateway.v1.ApiGateway",
	HandlerType: (*ApiGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _ApiGateway_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _ApiGateway_LoginUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ApiGateway_RefreshToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _ApiGateway_CheckToken_Handler,
		},
		{
			MethodName: "ReadSelfUser",
			Handler:    _ApiGateway_ReadSelfUser_Handler,
		},
		{
			MethodName: "ReadOtherUser",
			Handler:    _ApiGateway_ReadOtherUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ApiGateway_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ApiGateway_UpdateUser_Handler,
		},
		{
			MethodName: "GetFeedUserPack",
			Handler:    _ApiGateway_GetFeedUserPack_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _ApiGateway_DeleteMedia_Handler,
		},
		{
			MethodName: "GetUserMedia",
			Handler:    _ApiGateway_GetUserMedia_Handler,
		},
		{
			MethodName: "GetMediaUploadURL",
			Handler:    _ApiGateway_GetMediaUploadURL_Handler,
		},
		{
			MethodName: "ConfirmUploadMedia",
			Handler:    _ApiGateway_ConfirmUploadMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-gateway.proto",
}
